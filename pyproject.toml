[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "visdrone-toolkit"
version = "2.0.0"
description = "Modern PyTorch-based toolkit for VisDrone dataset with object detection models"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "Apache-2.0"}
authors = [
    {name = "Saumya Kumaar Saksena", email = "your.email@example.com"}
]
maintainers = [
    {name = "Saumya Kumaar Saksena", email = "your.email@example.com"}
]
keywords = [
    "computer-vision",
    "object-detection",
    "visdrone",
    "pytorch",
    "deep-learning",
    "drone",
    "aerial-imagery",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
]

dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "numpy>=1.21.0",
    "pillow>=9.0.0",
    "matplotlib>=3.5.0",
    "opencv-python>=4.7.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.4.0",
    "pre-commit>=3.3.0",
]
coco = [
    "pycocotools>=2.0.6",
]
all = [
    "visdrone-toolkit[dev,coco]",
]

[project.urls]
Homepage = "https://github.com/dronefreak/VisDrone-dataset-python-toolkit"
Documentation = "https://github.com/dronefreak/VisDrone-dataset-python-toolkit#readme"
Repository = "https://github.com/dronefreak/VisDrone-dataset-python-toolkit"
Issues = "https://github.com/dronefreak/VisDrone-dataset-python-toolkit/issues"
Changelog = "https://github.com/dronefreak/VisDrone-dataset-python-toolkit/blob/main/CHANGELOG.md"

[project.scripts]
visdrone-train = "scripts.train:main"
visdrone-inference = "scripts.inference:main"
visdrone-convert = "scripts.convert_annotations:main"
visdrone-evaluate = "scripts.evaluate:main"
visdrone-webcam = "scripts.webcam_demo:main"

[tool.setuptools]
packages = ["visdrone_toolkit", "visdrone_toolkit.converters"]

[tool.setuptools.package-data]
visdrone_toolkit = ["py.typed"]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=visdrone_toolkit --cov-report=term-missing"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["visdrone_toolkit"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py38"

# Enable specific rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
]

# Ignore specific rules
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # function call in argument defaults
    "B905",  # zip without explicit strict parameter
    "C901",  # function is too complex
]

# Exclude directories
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "venv",
    "build",
    "dist",
    "__pycache__",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["ARG", "S101"]  # Allow unused args and asserts in tests

[tool.ruff.mccabe]
max-complexity = 10

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Pydocstyle configuration
[tool.pydocstyle]
convention = "google"
add_ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107"]
match = "(?!test_).*\\.py"
match_dir = "^(?!(tests|docs|build|dist)).*"
